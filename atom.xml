<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://guozhaoning.github.io</id>
    <title>guozhaoning</title>
    <updated>2021-03-02T16:20:17.506Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://guozhaoning.github.io"/>
    <link rel="self" href="https://guozhaoning.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://guozhaoning.github.io/images/avatar.png</logo>
    <icon>https://guozhaoning.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, guozhaoning</rights>
    <entry>
        <title type="html"><![CDATA[Object实例占用多少字节]]></title>
        <id>https://guozhaoning.github.io/post/object-shi-li-zhan-yong-duo-shao-zi-jie/</id>
        <link href="https://guozhaoning.github.io/post/object-shi-li-zhan-yong-duo-shao-zi-jie/">
        </link>
        <updated>2021-03-02T16:16:11.000Z</updated>
        <content type="html"><![CDATA[<p>object由什么组成</p>
<p>对象头---64位--8个字节</p>
<p>类型指针---jvm多少位就是多少个字节，但是jvm虚拟机默认开启了压缩，所有默认64位被压缩成了32位，也就是4个字节</p>
<p>实例数据---如果对象的实例有数据，则数据有多少个字节就是多少，这个被称为oops，new一个对象没有字节</p>
<p>对齐---向上补齐到8的倍数，比如上三个数字加起来为12，则对齐数为4，16为8的倍数</p>
<p>所以 Object o = new Object(); o有16个字节 8+4+0+4</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[# Servlet核心源码理解]]></title>
        <id>https://guozhaoning.github.io/post/servlet-he-xin-yuan-ma-li-jie/</id>
        <link href="https://guozhaoning.github.io/post/servlet-he-xin-yuan-ma-li-jie/">
        </link>
        <updated>2021-02-26T12:37:48.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>抽象类不必全部实现接口中的方法</p>
</blockquote>
<h2 id="源码">源码</h2>
<h3 id="抽象接口-httpservlet">抽象接口 HttpServlet</h3>
<pre><code class="language-java">package javax.servlet.http;

import java.io.IOException;
import java.io.Serializable;
import java.lang.reflect.Method;
import java.text.MessageFormat;
import java.util.Enumeration;
import java.util.ResourceBundle;
import javax.servlet.GenericServlet;
import javax.servlet.ServletException;
import javax.servlet.ServletOutputStream;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;

public abstract class HttpServlet extends GenericServlet
  implements Serializable
{
  private static final String METHOD_DELETE = &quot;DELETE&quot;;
  private static final String METHOD_HEAD = &quot;HEAD&quot;;
  private static final String METHOD_GET = &quot;GET&quot;;
  private static final String METHOD_OPTIONS = &quot;OPTIONS&quot;;
  private static final String METHOD_POST = &quot;POST&quot;;
  private static final String METHOD_PUT = &quot;PUT&quot;;
  private static final String METHOD_TRACE = &quot;TRACE&quot;;
  private static final String HEADER_IFMODSINCE = &quot;If-Modified-Since&quot;;
  private static final String HEADER_LASTMOD = &quot;Last-Modified&quot;;
  private static final String LSTRING_FILE = &quot;javax.servlet.http.LocalStrings&quot;;
  private static ResourceBundle lStrings = ResourceBundle.getBundle(&quot;javax.servlet.http.LocalStrings&quot;);

  protected void doGet(HttpServletRequest req, HttpServletResponse resp)
    throws ServletException, IOException
  {
    String protocol = req.getProtocol();
    String msg = lStrings.getString(&quot;http.method_get_not_supported&quot;);
    if (protocol.endsWith(&quot;1.1&quot;))
      resp.sendError(405, msg);
    else
      resp.sendError(400, msg);
  }

  protected long getLastModified(HttpServletRequest req)
  {
    return -1L;
  }

  protected void doHead(HttpServletRequest req, HttpServletResponse resp)
    throws ServletException, IOException
  {
    NoBodyResponse response = new NoBodyResponse(resp);

    doGet(req, response);
    response.setContentLength();
  }

  protected void doPost(HttpServletRequest req, HttpServletResponse resp)
    throws ServletException, IOException
  {
    String protocol = req.getProtocol();
    String msg = lStrings.getString(&quot;http.method_post_not_supported&quot;);
    if (protocol.endsWith(&quot;1.1&quot;))
      resp.sendError(405, msg);
    else
      resp.sendError(400, msg);
  }

  protected void doPut(HttpServletRequest req, HttpServletResponse resp)
    throws ServletException, IOException
  {
    String protocol = req.getProtocol();
    String msg = lStrings.getString(&quot;http.method_put_not_supported&quot;);
    if (protocol.endsWith(&quot;1.1&quot;))
      resp.sendError(405, msg);
    else
      resp.sendError(400, msg);
  }

  protected void doDelete(HttpServletRequest req, HttpServletResponse resp)
    throws ServletException, IOException
  {
    String protocol = req.getProtocol();
    String msg = lStrings.getString(&quot;http.method_delete_not_supported&quot;);
    if (protocol.endsWith(&quot;1.1&quot;))
      resp.sendError(405, msg);
    else
      resp.sendError(400, msg);
  }

  private static Method[] getAllDeclaredMethods(Class c)
  {
    if (c.equals(HttpServlet.class)) {
      return null;
    }

    Method[] parentMethods = getAllDeclaredMethods(c.getSuperclass());
    Method[] thisMethods = c.getDeclaredMethods();

    if ((parentMethods != null) &amp;&amp; (parentMethods.length &gt; 0)) {
      Method[] allMethods = new Method[parentMethods.length + thisMethods.length];

      System.arraycopy(parentMethods, 0, allMethods, 0, parentMethods.length);

      System.arraycopy(thisMethods, 0, allMethods, parentMethods.length, thisMethods.length);

      thisMethods = allMethods;
    }

    return thisMethods;
  }

  protected void doOptions(HttpServletRequest req, HttpServletResponse resp)
    throws ServletException, IOException
  {
    Method[] methods = getAllDeclaredMethods(getClass());

    boolean ALLOW_GET = false;
    boolean ALLOW_HEAD = false;
    boolean ALLOW_POST = false;
    boolean ALLOW_PUT = false;
    boolean ALLOW_DELETE = false;
    boolean ALLOW_TRACE = true;
    boolean ALLOW_OPTIONS = true;

    for (int i = 0; i &lt; methods.length; i++) {
      Method m = methods[i];

      if (m.getName().equals(&quot;doGet&quot;)) {
        ALLOW_GET = true;
        ALLOW_HEAD = true;
      }
      if (m.getName().equals(&quot;doPost&quot;))
        ALLOW_POST = true;
      if (m.getName().equals(&quot;doPut&quot;))
        ALLOW_PUT = true;
      if (m.getName().equals(&quot;doDelete&quot;)) {
        ALLOW_DELETE = true;
      }
    }
    String allow = null;
    if ((ALLOW_GET) &amp;&amp; 
      (allow == null)) allow = &quot;GET&quot;;
    if (ALLOW_HEAD)
      if (allow == null) allow = &quot;HEAD&quot;; else
        allow = allow + &quot;, HEAD&quot;;
    if (ALLOW_POST)
      if (allow == null) allow = &quot;POST&quot;; else
        allow = allow + &quot;, POST&quot;;
    if (ALLOW_PUT)
      if (allow == null) allow = &quot;PUT&quot;; else
        allow = allow + &quot;, PUT&quot;;
    if (ALLOW_DELETE)
      if (allow == null) allow = &quot;DELETE&quot;; else
        allow = allow + &quot;, DELETE&quot;;
    if (ALLOW_TRACE)
      if (allow == null) allow = &quot;TRACE&quot;; else
        allow = allow + &quot;, TRACE&quot;;
    if (ALLOW_OPTIONS) {
      if (allow == null) allow = &quot;OPTIONS&quot;; else
        allow = allow + &quot;, OPTIONS&quot;;
    }
    resp.setHeader(&quot;Allow&quot;, allow);
  }

  protected void doTrace(HttpServletRequest req, HttpServletResponse resp)
    throws ServletException, IOException
  {
    String CRLF = &quot;\r\n&quot;;
    String responseString = &quot;TRACE &quot; + req.getRequestURI() + &quot; &quot; + req.getProtocol();

    Enumeration reqHeaderEnum = req.getHeaderNames();

    while (reqHeaderEnum.hasMoreElements()) {
      String headerName = (String)reqHeaderEnum.nextElement();
      responseString = responseString + CRLF + headerName + &quot;: &quot; + req.getHeader(headerName);
    }

    responseString = responseString + CRLF;

    int responseLength = responseString.length();

    resp.setContentType(&quot;message/http&quot;);
    resp.setContentLength(responseLength);
    ServletOutputStream out = resp.getOutputStream();
    out.print(responseString);
    out.close();
  }

  protected void service(HttpServletRequest req, HttpServletResponse resp)
    throws ServletException, IOException
  {
    String method = req.getMethod();

    if (method.equals(&quot;GET&quot;)) {
      long lastModified = getLastModified(req);
      if (lastModified == -1L)
      {
        doGet(req, resp);
      } else {
        long ifModifiedSince = req.getDateHeader(&quot;If-Modified-Since&quot;);
        if (ifModifiedSince &lt; lastModified / 1000L * 1000L)
        {
          maybeSetLastModified(resp, lastModified);
          doGet(req, resp);
        } else {
          resp.setStatus(304);
        }
      }
    }
    else if (method.equals(&quot;HEAD&quot;)) {
      long lastModified = getLastModified(req);
      maybeSetLastModified(resp, lastModified);
      doHead(req, resp);
    }
    else if (method.equals(&quot;POST&quot;)) {
      doPost(req, resp);
    }
    else if (method.equals(&quot;PUT&quot;)) {
      doPut(req, resp);
    }
    else if (method.equals(&quot;DELETE&quot;)) {
      doDelete(req, resp);
    }
    else if (method.equals(&quot;OPTIONS&quot;)) {
      doOptions(req, resp);
    }
    else if (method.equals(&quot;TRACE&quot;)) {
      doTrace(req, resp);
    }
    else
    {
      String errMsg = lStrings.getString(&quot;http.method_not_implemented&quot;);
      Object[] errArgs = new Object[1];
      errArgs[0] = method;
      errMsg = MessageFormat.format(errMsg, errArgs);

      resp.sendError(501, errMsg);
    }
  }

  private void maybeSetLastModified(HttpServletResponse resp, long lastModified)
  {
    if (resp.containsHeader(&quot;Last-Modified&quot;))
      return;
    if (lastModified &gt;= 0L)
      resp.setDateHeader(&quot;Last-Modified&quot;, lastModified);
  }

  public void service(ServletRequest req, ServletResponse res)
    throws ServletException, IOException
  {
    HttpServletRequest request;
    HttpServletResponse response;
    try
    {
      request = (HttpServletRequest)req;
      response = (HttpServletResponse)res;
    } catch (ClassCastException e) {
      throw new ServletException(&quot;non-HTTP request or response&quot;);
    }
    service(request, response);
  }
}
</code></pre>
<h3 id="抽象类-genericservlet">抽象类 GenericServlet</h3>
<pre><code class="language-java">package javax.servlet;

import java.io.IOException;
import java.io.Serializable;
import java.util.Enumeration;

public abstract class GenericServlet
  implements Servlet, ServletConfig, Serializable
{
  private transient ServletConfig config;

  public void destroy()
  {
  }

  public String getInitParameter(String name)
  {
    return getServletConfig().getInitParameter(name);
  }

  public Enumeration getInitParameterNames()
  {
    return getServletConfig().getInitParameterNames();
  }

  public ServletConfig getServletConfig()
  {
    return this.config;
  }

  public ServletContext getServletContext()
  {
    return getServletConfig().getServletContext();
  }

  public String getServletInfo()
  {
    return &quot;&quot;;
  }

  public void init(ServletConfig config)
    throws ServletException
  {
    this.config = config;
    init();
  }

  public void init()
    throws ServletException
  {
  }

  public void log(String msg)
  {
    getServletContext().log(getServletName() + &quot;: &quot; + msg);
  }

  public void log(String message, Throwable t)
  {
    getServletContext().log(getServletName() + &quot;: &quot; + message, t);
  }

  public abstract void service(ServletRequest paramServletRequest, ServletResponse paramServletResponse)
    throws ServletException, IOException;

  public String getServletName()
  {
    return this.config.getServletName();
  }
}
</code></pre>
<h3 id="抽象接口servlet">抽象接口Servlet</h3>
<pre><code class="language-java">package javax.servlet;

import java.io.IOException;

public abstract interface Servlet
{
  public abstract void init(ServletConfig paramServletConfig)
    throws ServletException;

  public abstract ServletConfig getServletConfig();

  public abstract void service(ServletRequest paramServletRequest, ServletResponse paramServletResponse)
    throws ServletException, IOException;

  public abstract String getServletInfo();

  public abstract void destroy();
}
</code></pre>
<h3 id="抽象接口servletconfig">抽象接口ServletConfig</h3>
<pre><code class="language-java">package javax.servlet;

import java.util.Enumeration;

public abstract interface ServletConfig
{
  public abstract String getServletName();

  public abstract ServletContext getServletContext();

  public abstract String getInitParameter(String paramString);

  public abstract Enumeration getInitParameterNames();
}
</code></pre>
<figure data-type="image" tabindex="1"><img src="C:%5CUsers%5Cguozhaoning%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200427000248145.png" alt="image-20200427000248145" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://guozhaoning.github.io/post/hello-gridea/</id>
        <link href="https://guozhaoning.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>